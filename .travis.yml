sudo: required
dist: trusty
language: cpp


cache:
  directories:
    - ${TRAVIS_BUILD_DIR}/deps/llvm-3.6.2
    - ${TRAVIS_BUILD_DIR}/deps/llvm-3.7.1
    - ${TRAVIS_BUILD_DIR}/deps/llvm-3.8.0
    - ${TRAVIS_BUILD_DIR}/deps/llvm-3.9.0


env:
  global:
    - secure: 7QmFfQWAEX4ZUI9SlkswmdIEdw0fynrl+kVTPdC7Ybi2Vh1K3o1cRzUGJK0RrktVdd6qFXvH9tijm+pCJz45KCrz84K6gHpa2tkmlq9XU8O5YCQQZR4/KSxd51xlFvpGogCQWKU+Ft+aDn/RQ/cqAKIa7S8qD/tQd4XsVKZWeUXBbDtyBIHdjQbjOyLh1YWCfdF+tc1WG4Ic50CEmhxTZDYLqLjRFrbYEIRTAA/fAIcZE0dGvbCaEULD2YZZeW+DK7qU98rsqZ8qL3zNwFoin/sD3iG8UNJxMp1lg4urUGsFauU+VJrLOjg22A7kb2TF2dPMpk36ipVOFKWmrLz9Q0r7WQBnbe2lpNTQGBAIjgzHI0jPVHB72jD+pVtK2zXwXh9IC0qVn3P8dAsK9yvnG+0p6eJ19Pqv0S3RqOcsespfIYLT97ZALdQpE6fGdAEFasdoPY0Zhx1y8jusmQEBCUplUzECLc3HVsMLiSM3ZiQfHZ2V6xEnyAxPjalvCidINSsEM5hYO6Ugzx8n4AQMY+0CWasMam9tY1OBcuOlHpY9CXNLBesMTP6W5tmpCOv+y7QfxDukghLSnnSwJTdhFBjGcb1SVsVnb12a7sXLbqe8vGYyurKVWSeT+hJeDkPZ9uryQTJg8X1RDgEw3ZuH3Si+62PNpdUMLm8FkCLI5OI=
    - secure: 4pU4q9DQtbfNDQl0j6lhqjY2A1NBkmKplQQ22/z/7utRpm5e79bBFIrHFDSZazryur9GJw+dw0aDFEv/JT0RWoxl5GJX6QRTe1MJyPo1sWC+K/PteROgcT2x7E3/F4Bk6uYtDlfNGYkCHLe4fNJMPovn9csOgq7uOdu0MHew/CADnk1ljegNZ1Z3SjGBFqA9vvRZr4GFrAnMqwtRla6BZWJ7rabN9lfJY1MTcbarO/otLwePy4w4IzxWwIk1uoO9IFX4yybONZeDpKjHr+vwK6bQb1zxnSzxsODKctMUJ38ZPlwJlqki8vG9MN5OToCvNR5wODFCYKYYjCC0O2f8cb7NYii/UmQ5dZyEIcxoZSkkjuR3P8eNKSaLypDNQ099RuCPStW2QPuol9pQXD93gmdIqBVV01zij/9GbXFaYBQPe+zSOf7WPqYiaJ2SkJj4z9mlfIOiKZ192KqzoWIy57GQtfOOi+wR1hwOnqL0rrELu9PZVjc3lWGQ1hIG2MiKbyrpY4Ty95hMAFIF7UDEg6VZy/oXqpfJ1fQStwvbrN/UPx0ZYawDzv5zEqScgKZaAhmBJll3ESTm479wLlK40J28EjjWHbIuLuraUwBN9OIC9Vcl9mn92Z7xUQ1YTfU1XMCxWjVldoyY4El+/X8ebP4AYRrUEjiAVH9XYnU1u/c=


matrix:
  include:
    # OSX, xcode 8
    - os: osx
      osx_image: xcode8
      env: CMAKE_OPTIONS="" PYPI=true
    # Linux, GCC 6
    - os: linux
      env: COMPILER_C=gcc-6 COMPILER_CXX=g++-6 CMAKE_OPTIONS="" PYPI=true
      compiler: g++
      addons:
        apt:
          packages:
          - g++-6
          - ca-certificates
          - python2.7
          sources:
          - sourceline: 'ppa:ubuntu-toolchain-r/test'
          - sourceline: 'ppa:jonathonf/python-2.7'
    # Linux, GCC 5.1
    - os: linux
      env: COMPILER_C=gcc-5 COMPILER_CXX=g++-5 CMAKE_OPTIONS="" PYPI=false
      compiler: g++
      addons:
        apt:
          packages:
          - g++-5
          sources:
          - sourceline: 'ppa:ubuntu-toolchain-r/test'


before_install:
  - sudo pip install numpy wheel twine
  # Run homebrew on osx
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then brew update; fi
  # Setup default versions and override compiler if needed
  - if [[ "${LLVM_VERSION}" == "default" ]]; then LLVM_VERSION=3.9.0; fi
  # Install a recent CMake (unless already installed on OS X)
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
      mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}
      CMAKE_URL="http://www.cmake.org/files/v3.5/cmake-3.5.2-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
      export CC=${COMPILER_C} CXX=${COMPILER_CXX}
    else
      if ! brew ls --version cmake &>/dev/null; then brew install cmake; fi
    fi


install:
  # Build everything
  - cd ${TRAVIS_BUILD_DIR}
  - |
    mkdir -p build
    cd build
    cmake ${CMAKE_OPTIONS} ..
  - make -j2
  - cd ..


script:
  # Build the python package
  - echo "Python package build"
  - if [ "$TRAVIS_BRANCH" != "master" ]; then export OVF_ADD_VERSION_SUFFIX=true; else export OVF_ADD_VERSION_SUFFIX=false; fi
  - echo "Add suffix to ovf version tag for python package $OVF_ADD_VERSION_SUFFIX"
  - cd python
  - python setup.py sdist bdist_wheel;

  # Specify account details for PyPI
  - echo "[distutils]"                                 > ~/.pypirc
  - echo "index-servers ="                            >> ~/.pypirc
  - echo "    testpypi"                               >> ~/.pypirc
  - echo "    pypi"                                   >> ~/.pypirc
  - echo "[pypi]"                                     >> ~/.pypirc
  - echo "repository=https://upload.pypi.org/legacy/" >> ~/.pypirc
  - echo "username=$PYPIUSER"                         >> ~/.pypirc
  - echo "password=$PYPIPASSWORD"                     >> ~/.pypirc
  - echo "[testpypi]"                                 >> ~/.pypirc
  - echo "repository=https://test.pypi.org/legacy/"   >> ~/.pypirc
  - echo "username=$PYPIUSER"                         >> ~/.pypirc
  - echo "password=$PYPIPASSWORD"                     >> ~/.pypirc

  # Publish python package
  - echo "PYPI deployment:"
  - if [ "$PYPI" != "true" ]; then echo "Not going to deploy because not configured to."; fi
  # Do not build pull requests
  - if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then echo "Not going to deploy because pull request."; fi
  - if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then PYPI=false; fi
  # Upload to pypi on master commits (if PYPI == true)
  - if [ "$PYPI" == "true" ] && [ "$TRAVIS_BRANCH" == "master" ]; then echo "Deploying to pypi because on master branch."; else echo "Not deploying to pypi."; fi
  - if [ "$PYPI" == "true" ] && [ "$TRAVIS_BRANCH" == "master" ]; then twine upload --skip-existing -r pypi dist/*; fi
  # Upload to testpypi on all commits (if PYPI == true)
  - if [ "$PYPI" == "true" ]; then echo "Deploying to testpypi."; else echo "Not deploying to testpypi."; fi
  - if [ "$PYPI" == "true" ]; then twine upload --skip-existing -r testpypi dist/*; fi